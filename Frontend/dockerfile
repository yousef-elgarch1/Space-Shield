# Stage 1: Build the application
FROM node:18-alpine as build

# Set working directory
WORKDIR /app

# Install git and bash (required for husky and better shell support)
RUN apk add --no-cache git bash

# Copy package.json first (for better caching)
COPY package.json ./

# CRITICAL: Modify package.json to remove husky prepare script
# This is the most reliable way to prevent husky installation issues
RUN node -e "const pkg = JSON.parse(require('fs').readFileSync('./package.json')); \
    delete pkg.scripts.prepare; \
    require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"

# Copy package-lock.json after modifying package.json
COPY package-lock.json ./

# Optimize npm for production builds
ENV NODE_ENV=production
ENV NPM_CONFIG_LOGLEVEL=error
ENV NPM_CONFIG_FUND=false
ENV NPM_CONFIG_AUDIT=false

# For extra protection, also set husky environment variables
# (although with the script removed, these aren't strictly necessary)
ENV HUSKY=0
ENV HUSKY_SKIP_INSTALL=1

# Install dependencies with cache mounting for faster builds
RUN --mount=type=cache,target=/root/.npm \
    npm ci --prefer-offline --no-audit

# Copy necessary files only for better layer caching
COPY tsconfig*.json vite.config.ts tailwind.config.ts ./
COPY public ./public
COPY src ./src

# Build the application using npx to ensure vite is found
RUN npx vite build

# Stage 2: Create optimized nginx image
FROM nginx:alpine as production

# Add security headers and optimization
RUN apk add --no-cache curl && \
    rm -rf /var/cache/apk/*

# Copy custom nginx config
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy only built files from build stage
COPY --from=build /app/dist /usr/share/nginx/html

# Add compression for static assets
RUN find /usr/share/nginx/html -type f -regex ".*\.\(js\|css\|svg\|json\)" -exec gzip -9 -k {} \; && \
    find /usr/share/nginx/html -type f -regex ".*\.\(js\|css\|svg\|json\)" -exec brotli -9 -k {} \; || true

# Set proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html

# Use non-root user for better security
USER nginx

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s CMD curl -f http://localhost/ || exit 1

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]