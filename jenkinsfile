pipeline {
    agent any

    environment {
        COMPOSE_FILE    = 'docker-compose.yml'
        BACKEND_DIR     = 'backend'
        FRONTEND_DIR    = 'Frontend'

        // non-sensitive static vars
        OREKIT_PATH     = '/app/orekit-data'
        DB_HOST         = 'mysql-container'
        DB_PORT         = '3316'
        MYSQL_DATABASE  = 'spaceshielddb'
    }

    stages {
        stage('Checkout') {
            steps { checkout scm }
        }

        stage('Build Backend') {
            steps {
                dir("${BACKEND_DIR}") {
                    sh 'chmod +x mvnw || true'
                    sh './mvnw clean package -DskipTests'
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir("${FRONTEND_DIR}") {
                    sh 'ls -la && cat package-lock.json || echo "LOCKFILE MISSING"'
                    sh 'npm ci'
                    sh 'npm run build'
                }
            }
        }

        stage('Test Backend') {
            steps {
                dir("${BACKEND_DIR}") {
                    sh './mvnw test'
                }
            }
        }

        stage('Build & Run Docker Compose') {
            steps {
                // bind your sensitive credentials from Jenkins
                withCredentials([
                  usernamePassword(
                    credentialsId: 'spacetrack-creds',
                    usernameVariable: 'SPACE_TRACK_USERNAME',
                    passwordVariable: 'SPACE_TRACK_PASSWORD'
                  ),
                  usernamePassword(
                    credentialsId: 'mysql-creds',
                    usernameVariable: 'MYSQL_USERNAME',
                    passwordVariable: 'MYSQL_PASSWORD'
                  ),
                  string(
                    credentialsId: 'mysql-root-password',
                    variable: 'MYSQL_ROOT_PASSWORD'
                  )
                ]) {
                  sh 'docker compose down -v || true'
                  sh 'docker compose up --build -d'
                }
            }
        }

        stage('Health Check') {
            steps {
                sh 'sleep 10' // wait for services
                sh 'curl --fail http://localhost:8080 || exit 1'
                sh 'curl --fail http://localhost:3001 || exit 1'
            }
        }
    }

    post {
        always {
            echo 'ðŸ§¹ Cleaning up containers...'
            sh 'docker compose down --volumes || true'
        }
    }
}
