pipeline {
    agent any

    environment {
        COMPOSE_FILE    = 'docker-compose.yml'
        BACKEND_DIR     = 'backend'
        FRONTEND_DIR    = 'Frontend'

        // non-sensitive static vars
        OREKIT_PATH     = '/app/orekit-data'
        DB_HOST         = 'mysql-container'
        DB_PORT         = '3316'
        MYSQL_DATABASE  = 'spaceshielddb'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Backend') {
            steps {
                dir("${BACKEND_DIR}") {
                    sh 'chmod +x mvnw || true'
                    sh './mvnw clean package -DskipTests'
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir("${FRONTEND_DIR}") {
                    sh 'ls -la && cat package-lock.json || echo "LOCKFILE MISSING"'
                    sh 'npm ci'
                    sh 'npm run build'
                }
            }
        }
        stage('Test Backend') {
            steps {
                dir("${BACKEND_DIR}") {
                    sh './mvnw test'
                }
            }
        }
        stage('Install Docker Compose Plugin') {
            steps {
                sh '''
                  mkdir -p ~/.docker/cli-plugins
                  curl -SL https://github.com/docker/compose/releases/download/v2.6.0/docker-compose-linux-x86_64 \
                    -o ~/.docker/cli-plugins/docker-compose
                  chmod +x ~/.docker/cli-plugins/docker-compose
                  docker compose version
                '''
            }
        }

        stage('Build & Run Docker Compose') {
            steps {
                withCredentials([
                  usernamePassword(
                    credentialsId: 'spacetrack-creds',
                    usernameVariable: 'SPACE_TRACK_USERNAME',
                    passwordVariable: 'SPACE_TRACK_PASSWORD'
                  ),
                  usernamePassword(
                    credentialsId: 'mysql-creds',
                    usernameVariable: 'MYSQL_USERNAME',
                    passwordVariable: 'MYSQL_PASSWORD'
                  ),
                  string(
                    credentialsId: 'mysql-root-password',
                    variable: 'MYSQL_ROOT_PASSWORD'
                  )
                ]) {
                 // 1) Stop & remove ONLY these three containers by name
                 sh 'docker stop mysql-container spring-backend vite-frontend || true'
                 sh 'docker rm   mysql-container spring-backend vite-frontend || true'

      // 2) Rebuild images and bring up the entire stack (minus Jenkins)
                 sh 'docker compose build'
                 sh 'docker compose up -d mysql backend frontend'
                }
            }
        }


    }

    post {
        always {
            echo 'ðŸ§¹ Cleaning up containers...'
            sh 'docker compose down --volumes || true'
        }
    }
}